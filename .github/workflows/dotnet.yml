name: .NET CI

on:
  push:
    branches: [ "main" ]
    paths:
      - src/
      - test/
      - .github/workflows/dotnet.yml
      - .config/dotnet-tools.json
      - global.json
      - '*.sln'
      - Directory.*.props
      - Directory.*.targets
      - coverage.config
  pull_request:
    branches: [ "main" ]
    paths:
      - src/
      - test/
      - .github/workflows/dotnet.yml
      - .config/dotnet-tools.json
      - global.json
      - '*.sln'
      - Directory.*.props
      - Directory.*.targets
      - coverage.config
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Docker Compose Up
      run: docker compose up -d mssql-tools

    - name: Cache Nuget packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/dotnet-tools.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu' # Alternative distribution options are available.

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Restore .NET tools
      run: dotnet tool restore

    - name: Begin Analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet sonarscanner begin /k:"vancodocton_MoneyGroup" /o:"vancodocton" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

    - name: Restore and Build
      run: |
        dotnet restore MoneyGroup.sln --locked-mode
        dotnet build MoneyGroup.sln -c Release --no-restore

    - name: Format Checking
      run: dotnet format MoneyGroup.sln --no-restore --verify-no-changes -v diag --severity info

    - name: Test
      shell: pwsh
      run: |
        docker compose up --wait mssql-tools
        dotnet test MoneyGroup.sln -c Release --no-build --verbosity normal -- --coverage --coverage-settings $pwd/coverage.config --coverage-output-format xml --report-xunit

    - name: End Analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet coverage merge **/TestResults/**.xml --output coverage.xml --output-format xml
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Upload TestResults Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-TestResults
        path: |
            **/TestResults/**
            coverage.xml
    - name: Upload TestResults to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
